force_https = true;plugin.loadMainCSS();$(document).ready(function() {    if(window.location.protocol != 'https:' && force_https){        alert("You are not accessing this site via https! Some features are disabled!");    }});var Base64 = {    // private property    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",    // public method for encoding    encode : function (input) {        var output = "";        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;        var i = 0;        input = Base64._utf8_encode(input);        while (i < input.length) {            chr1 = input.charCodeAt(i++);            chr2 = input.charCodeAt(i++);            chr3 = input.charCodeAt(i++);            enc1 = chr1 >> 2;            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);            enc4 = chr3 & 63;            if (isNaN(chr2)) {                enc3 = enc4 = 64;            } else if (isNaN(chr3)) {                enc4 = 64;            }            output = output +            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);        }        return output;    },    // public method for decoding    decode : function (input) {        var output = "";        var chr1, chr2, chr3;        var enc1, enc2, enc3, enc4;        var i = 0;        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");        while (i < input.length) {            enc1 = this._keyStr.indexOf(input.charAt(i++));            enc2 = this._keyStr.indexOf(input.charAt(i++));            enc3 = this._keyStr.indexOf(input.charAt(i++));            enc4 = this._keyStr.indexOf(input.charAt(i++));            chr1 = (enc1 << 2) | (enc2 >> 4);            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);            chr3 = ((enc3 & 3) << 6) | enc4;            output = output + String.fromCharCode(chr1);            if (enc3 != 64) {                output = output + String.fromCharCode(chr2);            }            if (enc4 != 64) {                output = output + String.fromCharCode(chr3);            }        }        output = Base64._utf8_decode(output);        return output;    },    // private method for UTF-8 encoding    _utf8_encode : function (string) {        string = string.replace(/\r\n/g,"\n");        var utftext = "";        for (var n = 0; n < string.length; n++) {            var c = string.charCodeAt(n);            if (c < 128) {                utftext += String.fromCharCode(c);            }            else if((c > 127) && (c < 2048)) {                utftext += String.fromCharCode((c >> 6) | 192);                utftext += String.fromCharCode((c & 63) | 128);            }            else {                utftext += String.fromCharCode((c >> 12) | 224);                utftext += String.fromCharCode(((c >> 6) & 63) | 128);                utftext += String.fromCharCode((c & 63) | 128);            }        }        return utftext;    },    // private method for UTF-8 decoding    _utf8_decode : function (utftext) {        var string = "";        var i = 0;        var c = c1 = c2 = 0;        while ( i < utftext.length ) {            c = utftext.charCodeAt(i);            if (c < 128) {                string += String.fromCharCode(c);                i++;            }            else if((c > 191) && (c < 224)) {                c2 = utftext.charCodeAt(i+1);                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));                i += 2;            }            else {                c2 = utftext.charCodeAt(i+1);                c3 = utftext.charCodeAt(i+2);                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));                i += 3;            }        }        return string;    }}logout = function(){    document.getElementById('logoutfrm').submit();}changepwd = function(){    theDialogManager.show("changepasswddialog");	}validatechangepwd = function(){    theDialogManager.hide("changepasswddialog");    if(window.location.protocol == 'https:' || force_https != true){        pwd_unencoded = document.getElementById('changepasswd').value;        if(typeof Base64 != "undefined"){            pwd_encoded = Base64.encode(pwd_unencoded);            document.getElementById('changepasswd').value = pwd_encoded;            return true;        }else{            log('missing base64 encoding!');            return false;        }    }else{        log('can only change password if https!');        return false;    }}if(plugin.enabled){	if(plugin.canChangeMenu())	{        plugin.createMenu = theWebUI.createMenu;        theWebUI.createMenu = function(e, id)         {            plugin.createMenu.call(this,e,id);            if(plugin.enabled)            {                /*Need to remove Labeles menu item here. Work around; commented out 2 lines in webui.js                var el = theContextMenu.get(theUILang.Properties);                if(el)                    theContextMenu.add(el,["Test", null]);*/                              }        }    }    //disable to label on add torrent form    document.getElementById("tadd_label").disabled = 'True';    $(document.body).append($("<iframe name='userlabelfrm'/>").css({visibility: "hidden"}).attr( { name: "userlabelfrm", id: "userlabelfrm" } ).width(0).height(0).load(function()    {            $("#userlabeltorrentname").val('');        var d = (this.contentDocument || this.contentWindow.document);        if(d.location.href != "about:blank")            try { eval(d.body.innerHTML); } catch(e) {}    }));        $(document.body).append($("<iframe name='passwdchangefrm'/>").css({visibility: "hidden"}).attr( { name: "passwdchangefrm", id: "passwdchangefrm" } ).width(0).height(0).load(function()    {            $("#userlabeltorrentname").val('');        var d = (this.contentDocument || this.contentWindow.document);        if(d.location.href != "about:blank")            try { eval(d.body.innerHTML); } catch(e) {}    }));        $(document.body).append(        $('<form action="plugins/userlabels/action.php" id="getcurrentuser" name="getcurrentuser" method="get" target="userlabelfrm">'+            '<input type="hidden" name="getcurrentuser" id="getcurrentuser" value="">'+        '</form>').width(0).height(0));    document.getElementById('getcurrentuser').submit();         $(document.body).append(        $('<form action="plugins/userlabels/action.php" id="logoutfrm" name="logoutfrm" method="get">'+            '<input type="hidden" name="logout" id="logout" value="">'+        '</form>').width(0).height(0));                 var myIFrame = document.getElementById("userlabelfrm");    var current_user = myIFrame.contentWindow.document.body.innerHTML;    $("#tadd_label").val(current_user);    label = "Please enter your new password:<br>";    if(force_https){        label += "This feature can only be used if using https<br>";    }    theDialogManager.make( "changepasswddialog", "Change Password",    "<div style='overflow:auto; width: 350px; height: 100'>"+    '<form action="plugins/userlabels/action.php" id="changepasswdfrm" name="changepasswdfrm" method="get" target="passwdchangefrm" onsubmit="return validatechangepwd();">'+        label+        'New Password:<input type="password" name="changepasswd" id="changepasswd" value="">'+         "<div class='aright buttons-list'><input type='submit' value='"+theUILang.ok+"' class='Button' id='changepasswdsubmit'/><input type='button' value='"+theUILang.Cancel+"' class='Cancel Button'/></div>"+    '</form>'+    '</div>',    true);    theDialogManager.hide("changepasswddialog");	            plugin.addButtonToToolbar("webuiLogout", "Logout", "logout()", "help");    $("#webuiLogout").addClass("logout");    plugin.addButtonToToolbar("webuiChangepwd", "Change Password", "changepwd()", "help");    $("#webuiChangepwd").addClass("changepwd");}